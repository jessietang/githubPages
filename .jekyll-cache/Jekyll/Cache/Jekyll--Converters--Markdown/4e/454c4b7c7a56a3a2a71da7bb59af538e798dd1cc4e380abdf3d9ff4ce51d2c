I"5'<h4 id="讲区别之前先讲一下三者的共同点">讲区别之前，先讲一下三者的共同点：</h4>
<blockquote>
  <ol>
    <li>都是用来改变函数的this对象的指向的。</li>
    <li>第一个参数都是this要指向的对象。</li>
    <li>都可以利用后续参数传参。</li>
  </ol>
</blockquote>

<h4 id="三者的区别">三者的区别：</h4>
<blockquote>
  <ol>
    <li>call/apply都是对函数的直接调用。二者传参有区别。 <br /> call(this,arg1,arg2,…)  /  apply(this,[arg1,arg2,…])</li>
    <li>bind函数返回的还是一个函数。【后面写一个bind函数的实现】<br /> bind(thisArgs, arg1, arg2, …)</li>
  </ol>
</blockquote>

<p> </p>

<h4 id="1-先来说说bind函数">1. 先来说说bind函数</h4>

<h4 id="bind函数的几种常见用法">bind函数的几种常见用法：</h4>

<h5 id="1-偏函数使一个函数拥有预设的初始参数">1. 偏函数。使一个函数拥有预设的初始参数。</h5>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span><span class="p">){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">x+y</span><span class="dl">'</span><span class="p">,</span> <span class="nx">x</span><span class="o">+</span><span class="nx">y</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">add1</span> <span class="o">=</span> <span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="c1">// x+y 3</span>

<span class="kd">var</span> <span class="nx">add2</span> <span class="o">=</span> <span class="nx">add</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="mi">100</span><span class="p">)</span>
<span class="nx">add2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="c1">// x+y 100+1 = 101  第二个参数2无效</span>
</code></pre></div></div>

<h5 id="2-改变this指向">2. 改变this指向</h5>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 在默认情况下，使用 window.setTimeout() 时，this 关键字会指向 window （或 global）对象。</span>
<span class="c1">// 当类的方法中需要 this 指向类的实例时，你可能需要显式地把 this 绑定到回调函数，就不会丢失该实例的引用。</span>
<span class="kd">function</span> <span class="nx">Test</span><span class="p">(){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span>
<span class="p">}</span>
<span class="nx">Test</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">boom</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">declare</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="k">this</span><span class="p">),</span> <span class="mi">1000</span><span class="p">)</span>
<span class="p">}</span>
<span class="nx">Test</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">declare</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">test</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Test</span><span class="p">()</span>
<span class="nx">test</span><span class="p">.</span><span class="nx">boom</span><span class="p">()</span> <span class="c1">// 1 Test{x: 1}</span>
</code></pre></div></div>

<h4 id="来实现一个简易的bind函数需要注意的是bind函数返回的还是一个函数">来实现一个简易的bind函数，需要注意的是，bind函数返回的还是一个函数：</h4>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 简易实现</span>
<span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">myBind</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">context</span><span class="p">){</span>
    <span class="kd">var</span> <span class="nb">self</span> <span class="o">=</span> <span class="k">this</span>
    <span class="k">return</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="c1">// 把当前函数(调用myBind方法的函数)的this，指向myBind的第一个参数对象的this</span>
        <span class="nb">self</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">context</span><span class="p">)</span>
    <span class="p">}</span>
 <span class="p">}</span>

 <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">x</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
 <span class="kd">var</span> <span class="nx">fun</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span>
 <span class="p">}.</span><span class="nx">myBind</span><span class="p">(</span><span class="nx">obj</span><span class="p">)</span>
 <span class="nx">fun</span><span class="p">()</span> <span class="c1">// 1</span>

</code></pre></div></div>

<h4 id="bind函数复杂一点的实现">bind函数复杂一点的实现：</h4>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// bind函数复杂一点的实现</span>
 <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">myBind</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
     <span class="c1">// 这个地方的arguments是myBind这个function的arguments</span>
     <span class="kd">var</span> <span class="nb">self</span> <span class="o">=</span> <span class="k">this</span>
     <span class="kd">var</span> <span class="nx">context</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">shift</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)</span>
     <span class="kd">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="p">[].</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)</span>
     <span class="k">return</span> <span class="kd">function</span><span class="p">(){</span>
         <span class="c1">// 这个地方的arguments是当前return这个function的arguments</span>
        <span class="nb">self</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">context</span><span class="p">,</span> <span class="p">[].</span><span class="nx">concat</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">args</span><span class="p">,</span> <span class="p">[].</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">)))</span>
     <span class="p">}</span>
 <span class="p">}</span>

 <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span><span class="na">x</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>
 <span class="kd">var</span> <span class="nx">fun</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">){</span>
     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">)</span>
 <span class="p">}.</span><span class="nx">myBind</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span><span class="mi">300</span><span class="p">)</span>
 <span class="nx">fun</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="mi">200</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="c1">// 1 300 100</span>
</code></pre></div></div>
<p>上面的这个bind函数实现，涉及到较多关于call和apply的使用。下面来说一下这俩。</p>
:ET