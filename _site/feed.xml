<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>唐静</title>
    <description>2年RN，3年前端。</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 06 Apr 2021 10:19:39 +0800</pubDate>
    <lastBuildDate>Tue, 06 Apr 2021 10:19:39 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>2021-04-06-iphone各机型屏幕尺寸（包含最新iphone12）</title>
        <description>&lt;p&gt;前言：更新 iphone 各机型屏幕尺寸列表（包含最新 iphone12）&lt;/p&gt;

&lt;h3 id=&quot;iphone-各机型屏幕尺寸如下所示&quot;&gt;iphone 各机型屏幕尺寸如下所示&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;手机设备型号&lt;/td&gt;
      &lt;td&gt;屏幕尺寸&lt;/td&gt;
      &lt;td&gt;分辨率点数（pt）&lt;/td&gt;
      &lt;td&gt;屏幕显示模式&lt;/td&gt;
      &lt;td&gt;分辨率像素（px）&lt;/td&gt;
      &lt;td&gt;屏幕比例&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iPhone SE&lt;/td&gt;
      &lt;td&gt;4.0 吋&lt;/td&gt;
      &lt;td&gt;320x568&lt;/td&gt;
      &lt;td&gt;@2x&lt;/td&gt;
      &lt;td&gt;640x1136&lt;/td&gt;
      &lt;td&gt;16:9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iPhone 6/6s/7/8/SE 2&lt;/td&gt;
      &lt;td&gt;4.7 吋&lt;/td&gt;
      &lt;td&gt;375x667&lt;/td&gt;
      &lt;td&gt;@2x&lt;/td&gt;
      &lt;td&gt;750x1334&lt;/td&gt;
      &lt;td&gt;16:9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iPhone 6p/7p/8p&lt;/td&gt;
      &lt;td&gt;5.5 吋&lt;/td&gt;
      &lt;td&gt;414x736&lt;/td&gt;
      &lt;td&gt;@3x&lt;/td&gt;
      &lt;td&gt;1242x2208&lt;/td&gt;
      &lt;td&gt;16:9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iPhone XR/11&lt;/td&gt;
      &lt;td&gt;6.1 吋&lt;/td&gt;
      &lt;td&gt;414x896&lt;/td&gt;
      &lt;td&gt;@2x&lt;/td&gt;
      &lt;td&gt;828x1792&lt;/td&gt;
      &lt;td&gt;19.5:9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iPhone X/XS/11 Pro&lt;/td&gt;
      &lt;td&gt;5.8 吋&lt;/td&gt;
      &lt;td&gt;375x812&lt;/td&gt;
      &lt;td&gt;@3x&lt;/td&gt;
      &lt;td&gt;1125x2436&lt;/td&gt;
      &lt;td&gt;19.5:9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iPhone XS Max/11 Pro Max&lt;/td&gt;
      &lt;td&gt;6.5 吋&lt;/td&gt;
      &lt;td&gt;414x896&lt;/td&gt;
      &lt;td&gt;@3x&lt;/td&gt;
      &lt;td&gt;1242x2688&lt;/td&gt;
      &lt;td&gt;19.5:9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iPhone 12 mini&lt;/td&gt;
      &lt;td&gt;5.4 吋&lt;/td&gt;
      &lt;td&gt;360x780&lt;/td&gt;
      &lt;td&gt;@3x&lt;/td&gt;
      &lt;td&gt;1080x2340&lt;/td&gt;
      &lt;td&gt;19.5:9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iPhone 12/12 Pro&lt;/td&gt;
      &lt;td&gt;6.1 吋&lt;/td&gt;
      &lt;td&gt;390x844&lt;/td&gt;
      &lt;td&gt;@3x&lt;/td&gt;
      &lt;td&gt;1170x2532&lt;/td&gt;
      &lt;td&gt;19.5:9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iPhone 12 Pro Max&lt;/td&gt;
      &lt;td&gt;6.7 吋&lt;/td&gt;
      &lt;td&gt;428x926&lt;/td&gt;
      &lt;td&gt;@3x&lt;/td&gt;
      &lt;td&gt;1284x2778&lt;/td&gt;
      &lt;td&gt;19.5:9&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Tue, 06 Apr 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/04/iphone%E5%90%84%E6%9C%BA%E5%9E%8B%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8-%E5%8C%85%E5%90%AB%E6%9C%80%E6%96%B0iphone12/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/04/iphone%E5%90%84%E6%9C%BA%E5%9E%8B%E5%B1%8F%E5%B9%95%E5%B0%BA%E5%AF%B8-%E5%8C%85%E5%90%AB%E6%9C%80%E6%96%B0iphone12/</guid>
        
        <category>#ios,</category>
        
        <category>#iphone,</category>
        
        <category>#屏幕尺寸</category>
        
        
      </item>
    
      <item>
        <title>2021-04-06-ios完整的 statusbar 高度的表</title>
        <description>&lt;p&gt;前言：更新 iphone 各机型屏幕尺寸列表（包含最新 iphone12）&lt;/p&gt;

&lt;h3 id=&quot;iphone-各机型屏幕尺寸如下所示&quot;&gt;iphone 各机型屏幕尺寸如下所示&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;设备&lt;/td&gt;
      &lt;td&gt;statusbar 高度&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iPhone11&lt;/td&gt;
      &lt;td&gt;48&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iPhone12/12 pro/12 pro max&lt;/td&gt;
      &lt;td&gt;47&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iPhone12 mini&lt;/td&gt;
      &lt;td&gt;50&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;iPad Pro、IPad Air&lt;/td&gt;
      &lt;td&gt;24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Other iPhones&lt;/td&gt;
      &lt;td&gt;44&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;非刘海屏&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Tue, 06 Apr 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/04/ios%E5%AE%8C%E6%95%B4%E7%9A%84-statusbar-%E9%AB%98%E5%BA%A6%E7%9A%84%E8%A1%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/04/ios%E5%AE%8C%E6%95%B4%E7%9A%84-statusbar-%E9%AB%98%E5%BA%A6%E7%9A%84%E8%A1%A8/</guid>
        
        <category>#ios,</category>
        
        <category>#iphone,</category>
        
        <category>#屏幕尺寸</category>
        
        
      </item>
    
      <item>
        <title>鼠标右键contextMenu事件在mac和windows上的不同</title>
        <description>&lt;p&gt;前言：在做一个自定义鼠标右键菜单的需求的时候，发现 contextMenu 事件在 mac 和 windows 平台上表现不一致。&lt;/p&gt;

&lt;h3 id=&quot;方法使用&quot;&gt;方法使用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;区别&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;mac: 右键按下即触发 contextMenu event，鼠标抬起，触发 mouseUp event；&lt;/li&gt;
      &lt;li&gt;win: 右键按下抬起后，先触发 mouseUp event，然后触发 contextMenu event。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 31 Mar 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/03/%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AEcontextMenu%E4%BA%8B%E4%BB%B6%E5%9C%A8mac%E5%92%8Cwindows%E4%B8%8A%E7%9A%84%E4%B8%8D%E5%90%8C/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/03/%E9%BC%A0%E6%A0%87%E5%8F%B3%E9%94%AEcontextMenu%E4%BA%8B%E4%BB%B6%E5%9C%A8mac%E5%92%8Cwindows%E4%B8%8A%E7%9A%84%E4%B8%8D%E5%90%8C/</guid>
        
        <category>#鼠标右键事件,</category>
        
        <category>#contextMenu,#mac</category>
        
        <category>&amp;</category>
        
        <category>windows区别</category>
        
        
      </item>
    
      <item>
        <title>insertAdjacentHTML方法的使用</title>
        <description>&lt;p&gt;前言：我们常用 innerText &amp;amp; innerHTML 给一个 dom 元素插入一段文本或者 html。最近发现还有 insertAdjacentHTML 和 insertAdjacentText 方法，这两个方法更灵活，可以在指定的地方插入 html 内容和文本内容。（adjacent，这个单词是“相邻”的意思）&lt;/p&gt;

&lt;h3 id=&quot;方法使用&quot;&gt;方法使用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;insertAdjacentHTML(swhere, stext)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;swhere: 指定插入 html 标签语句的地方，有四个值可选：
        &lt;ul&gt;
          &lt;li&gt;beforeBegin:插入到标签开始标记前， 如：xxx&amp;lt;div&amp;gt;&lt;/li&gt;
          &lt;li&gt;afterBegin:插入到标签开始标记后，如：&amp;lt;div&amp;gt;xxx&lt;/li&gt;
          &lt;li&gt;beforeEnd:插入到标签结束标记前，如：xxx&amp;lt;/div&amp;gt;&lt;/li&gt;
          &lt;li&gt;afterEnd:插入到标签结束标记后, 如：&amp;lt;/div&amp;gt;xxx&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;stext: 要插入的内容&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;insertAdjacentText(swhere, stext)方法与 inserAdjacentHTML 方法类似，只不过只能插入纯文本，参数一样。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 30 Mar 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/03/insertAdjacentHTML%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/03/insertAdjacentHTML%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
        
        <category>#insertAdjacentHTML,</category>
        
        <category>#insertAdjacentText,</category>
        
        
      </item>
    
      <item>
        <title>React17源码解读笔记</title>
        <description>&lt;p&gt;前言：好奇 react 虚拟 dom 的结构，到底长什么样？&lt;/p&gt;

&lt;h4 id=&quot;1fork-react-代码仓库&quot;&gt;1.fork react 代码仓库&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;注意，不要直接下载 React 仓库，先 fork 一份到自己仓库，然后再下载。这样可以修改或者增加注释之后，提交到自己仓库。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 25 Feb 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/02/react17%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/02/react17%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</guid>
        
        <category>#react,</category>
        
        <category>#react源码,</category>
        
        <category>#react虚拟dom</category>
        
        
      </item>
    
      <item>
        <title>Bash脚本学习</title>
        <description>&lt;p&gt;前言：Bash 是 Unix 系统和 Linux 系统的一种 Shell（命令行环境），是目前绝大多数 Linux 发行版的默认 Shell。&lt;/p&gt;

&lt;h2 id=&quot;bash-简介&quot;&gt;Bash 简介&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;shell 的含义&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;shell 是一个程序，提供一个与用户对话的环境；&lt;/li&gt;
      &lt;li&gt;shell 是一个命令解释器，解释用户输入的命令；&lt;/li&gt;
      &lt;li&gt;shell 是一个工具箱，提供了各种小工具，供用户方便的使用操作系统的功能。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;shell 的种类&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Bourne Shell（sh）&lt;/li&gt;
      &lt;li&gt;Bourne Again shell（bash）&lt;/li&gt;
      &lt;li&gt;C Shell（csh）&lt;/li&gt;
      &lt;li&gt;TENEX C Shell（tcsh）&lt;/li&gt;
      &lt;li&gt;Korn shell（ksh）&lt;/li&gt;
      &lt;li&gt;Z Shell（zsh）&lt;/li&gt;
      &lt;li&gt;Friendly Interactive Shell（fish）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查看当前运行的 Shell&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo $SHELL
/bin/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查看当前的 Linux 系统安装的所有 Shell（上面两个命令中，$是命令行环境的提示符，用户只需要输入提示符后面的内容）&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat /etc/shells
/bin/bash
/bin/csh
/bin/dash
/bin/ksh
/bin/sh
/bin/tcsh
/bin/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;进入和退出方法
进入命令行环境以后，一般就已经打开 Bash 了。如果你的 shell 不是 Bash，可以输入&lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt;命令启动 Bash。
退出 Bash 环境，可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt;命令，也可以同时按下&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl + d&lt;/code&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tangjing@tangjingdeMacBook-Pro ~ % bash
The default interactive shell is now zsh.
To update your account to use zsh, please run `chsh -s /bin/zsh`.
For more details, please visit https://support.apple.com/kb/HT208050.
bash-3.2$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;显示当前所在的目录&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pwd
/Users/tangjing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;echo -e 参数&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;-e 参数使得\n 解释为换行符，导致输出内容里面出现换行&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;hello \nworld&quot;
hello \nworld
$ echo -e &quot;hello \nworld&quot;
hello
world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;命令格式&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;ls 命令，ls 后面的-l,-list,-r,-reverse 都是参数&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;ls -l&lt;/li&gt;
          &lt;li&gt;ls -list&lt;/li&gt;
          &lt;li&gt;ls -r&lt;/li&gt;
          &lt;li&gt;ls -reverse&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Bash 单个命令一般都是一行，用户按下回车键，就开始执行。有些命令比较长，写成多行会有利于阅读和编辑，这时可以在每一行的结尾加上反斜杠，Bash 就会将下一行跟当前行放在一起解释。&lt;/p&gt;
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo hello world
hello world
#等同于
$ echo hello \
&amp;gt; world
&amp;gt; hello world
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;空格-Bash 使用空格（或 Tab 键）区分不同的参数&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;下面命令中，foo 和 bar 之间有一个空格，所以 Bash 认为它们是两个参数。
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ command foo bar&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;如果参数之间有多个空格，Bash 会自动忽略多余的空格&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo this is a  test
this is a test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;分号-分号（;）是命令的结束符，使得一行可以放置多个命令，上一个命令执行结束后，再执行第二个命令。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo test;pwd
test
/Users/tangjing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;命令的组合符&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp; 和 ||&lt;/code&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Command1 &amp;amp;&amp;amp; Command2&lt;/code&gt; 这个命令的意思是，如果 Command1 命令运行成功，则继续运行 Command2 命令。&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo test111 &amp;amp;&amp;amp; pwd
test111
/Users/tangjing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Command1 || Command2&lt;/code&gt; 这个命令的意思是，如果 Command1 命令运行失败，则继续运行 Command2 命令。&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ llllaaa || pwd
bash:llllaaa: command not found
/Users/tangjing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;type 命令&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;type 命令用来判断命令的来源—下面代码中，type 命令告诉我们，echo 是内部命令，ls 是外部程序（/bin/ls）。type 命令本身也是内置命令。&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ type echo
echo is a shell builtin
$ type ls
ls is hashed (/bin/ls)
$ type type
type is a shell builtin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;如果要查看一个命令的所有定义，可以使用 type 命令的-a 参数。下面代码表示，echo 命令即是内置命令，也有对应的外部程序。&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ type -a echo
echo is a shell builtin
echo is /bin/echo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;type 命令的-t 参数，可以返回一个命令的类型：别名（alias），关键词（keyword），函数（function），内置命令（builtin）和文件（file）。&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ type -t type
builtin
$ type -t echo
builtin
$ type -t if
keyword
$ type -t bash
file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;上面例子中，type 是内置命令，echo 是内置命令，if 是关键词，bash 是 file&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;快捷键&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+ L&lt;/code&gt;：清除屏幕并将当前行移到页面顶部&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + C&lt;/code&gt;：中止当前正在执行的命令&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + U&lt;/code&gt;：从当前位置删除到行首&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + K&lt;/code&gt;：从当前位置删除到行尾&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl + D&lt;/code&gt;：关闭 Shell 对话&lt;/li&gt;
      &lt;li&gt;上下箭头：浏览已执行命令的历史记录&lt;/li&gt;
      &lt;li&gt;Tab 键盘：路径自动补全&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bash 的模式扩展&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;简介
        &lt;ul&gt;
          &lt;li&gt;Shell 接收到用户输入的命令以后，会根据空格将用户的输入，拆分成一个个词元（token）。然后，Shell 会扩展词元里面的特殊字符，扩展完成后才会调用相应的命令。&lt;/li&gt;
          &lt;li&gt;这种特殊字符的扩展，称为模式扩展（globbing）。其中有些用到通配符，又称为通配符扩展（wildcard expansion）。Bash 一共提供八种扩展。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;关闭扩展：
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ set -o noglob
# 或者
$ set -f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;重新打开扩展：
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ set +o noglob
$ set +f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;八种扩展：&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;波浪线扩展
            &lt;ul&gt;
              &lt;li&gt;波浪线&lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;会自动扩展成当前用户的主目录。
                &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo ~
/Users/tangjing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/dir&lt;/code&gt;表示扩展成主目录的某个子目录，&lt;code class=&quot;highlighter-rouge&quot;&gt;dir&lt;/code&gt;是主目录里面的一个子目录名。
                &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 进入/Users/tangjing/works目录
cd ~/works
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~user&lt;/code&gt;表示扩展成用户&lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt;的主目录
                &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo ~tangjing
/Users/tangjing
$ pwd
/Users/tangjing
$ cd ..
$ pwd
/Users
$ cd ~tangjing
$ pwd
/Users/tangjing
$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                &lt;/div&gt;
                &lt;p&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;~user&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt;是不存在的用户名，则波浪号扩展不起作用:&lt;/p&gt;
                &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ~jessie
bash: cd: ~jessie: No such file or directory
$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                &lt;/div&gt;
                &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~+&lt;/code&gt;会扩展成当前所在的目录，等同于&lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt;命令:&lt;/p&gt;
                &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ~/works/
$ echo ~+
/Users/tangjing/works
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;字符扩展&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt;字符扩展属于文件名扩展，只有文件确实存在的情况下(例如，当前目录下存在 test.html 这个文件)，才会发生扩展：&lt;/li&gt;
            &lt;/ul&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls ????.html
test.html
$ ls ?.html
ls: ?.html: No such file or directory
$ ls ????.html
test.html
$ echo ?.html
?.html
$ echo ????.html
test.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;字符扩展&lt;/p&gt;

            &lt;ul&gt;
              &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;字符代表文件路径里面的任意数量的任意字符，包括零个字符:&lt;/li&gt;
            &lt;/ul&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls *.html
test.html	weather.html
$ ls *.png
LWScreenShot 2020-12-12 at ??????2.59.19.png
Simulator Screen Shot - iPhone 12 Pro Max - 2020-12-22 at 22.51.24.png
Simulator Screen Shot - iPhone 12 Pro Max - 2020-12-27 at 15.27.46.png
Simulator Screen Shot - iPhone 12 Pro Max - 2021-01-16 at 14.28.22.png
bimface?????? (1).png
bimface??????.png
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;如果你想输出当前目录的所有文件，直接用&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;即可:&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;

            &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;可以匹配空字符:&lt;/p&gt;

            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 存在test.html 和 test2.html两个文件：
$ ls test*.html
test.html test2.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;方括号扩展&lt;/li&gt;
          &lt;li&gt;大括号扩展&lt;/li&gt;
          &lt;li&gt;变量扩展&lt;/li&gt;
          &lt;li&gt;子命令扩展&lt;/li&gt;
          &lt;li&gt;算术扩展&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 05 Jan 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/01/Bash%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/01/Bash%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0/</guid>
        
        <category>#bash,</category>
        
        <category>#shell</category>
        
        
      </item>
    
      <item>
        <title>RN使用react-navigation底部tab切换触发相应事件</title>
        <description>&lt;p&gt;问题引入：
在 rn 实际开发场景中遇到很多这种需求：主页面，底部是 react-navigation 实现的底部 tab 栏。在使用应用的过程中，可进行切换。但是，在切换的时候，需要触发切换这个事件，在这个事件里面，去执行其他时间（例如：请求最新的个人信息数据、或者最新的消息数据等等）
解决这类问题，大致就是网上查阅，翻翻文档。最后把我自己实际开发中用到的两种解决方案附上，以做记录：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;完全使用 hook：首次进入该页面时就会触发。后面再次进入的时候，也会触发。首次进入该 screen 不需要单独请求数据。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { useFocusEffect, useIsFocused } from 'react-navigation-hooks'
import React, { useCallback, useEffect, useState } from 'react'

useFocusEffect(
    useCallback(() =&amp;gt; {
      console.log('screen takes focus')
      doRequest();

      return () =&amp;gt; console.debug('screen loses focus')
    }, [])
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;不使用 hook：用 didFocus 来进行监听，首次进入该页面时，不会触发。后面再进入的时候，会触发。所以这种模式，首次进入该 screen 需要单独请求数据。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 首次进入需要单独请求数据
useEffect(()=&amp;gt;{
    console.log('第一进入触发')
    doRequest();
},[])

useEffect(() =&amp;gt; {
    console.log('第一进入触发')
    const _navListener = props.navigation.addListener('didFocus', () =&amp;gt; {
      console.log('后面再进入触发')
      doRequest();
    });

    return () =&amp;gt; {
      _navListener.remove();
    };
  }, []);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 24 Jul 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/07/RN%E4%BD%BF%E7%94%A8react-navigation%E5%BA%95%E9%83%A8tab%E5%88%87%E6%8D%A2%E8%A7%A6%E5%8F%91%E7%9B%B8%E5%BA%94%E4%BA%8B%E4%BB%B6/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/07/RN%E4%BD%BF%E7%94%A8react-navigation%E5%BA%95%E9%83%A8tab%E5%88%87%E6%8D%A2%E8%A7%A6%E5%8F%91%E7%9B%B8%E5%BA%94%E4%BA%8B%E4%BB%B6/</guid>
        
        
      </item>
    
      <item>
        <title>mac下全局配置adb环境</title>
        <description>&lt;p&gt;前言：adb 的全称为 Android Debug Bridge，就是起到调试桥的作用。通过 adb 我们可以在 IDE 中通过 DDMS 来调试 Android 程序，其实也就是 debug 工具。&lt;/p&gt;

&lt;p&gt;但是我们在 MAC 下安装完 JDK 和 Android studio 以后，我们在命令行执行这个命令，会提示这个错误：
&lt;code class=&quot;highlighter-rouge&quot;&gt;adb: command not found&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;android-adb-环境设置&quot;&gt;Android adb 环境设置&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;进入当前用户 home 目录
打开 terminal 终端，默认就是 home 根目录。如果不确认，可以在命令行输入：
&lt;code class=&quot;highlighter-rouge&quot;&gt;echo $HOME&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;输出的内容一般是类似这样的信息：/Users/你自己的用户名
也可以使用以下命令，查看当前所在目录：
&lt;code class=&quot;highlighter-rouge&quot;&gt;pwd&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;创建.bash_profile 文件
&lt;code class=&quot;highlighter-rouge&quot;&gt;touch .bash_profile&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;打开.bash_profile 文件
&lt;code class=&quot;highlighter-rouge&quot;&gt;open -e .bash_profile&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编辑.bash_profile 文件。注意：/Users/你自己的用户名 要换成你自己的 home 目录&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export ANDROID_HOME=/Users/你自己的用户名/Library/Android/sdk
export PATH=${PATH}:${ANDROID_HOME}/tools
export PATH=${PATH}:${ANDROID_HOME}/platform-tools
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;编译.bash_profile
&lt;code class=&quot;highlighter-rouge&quot;&gt;source .bash_profile&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;至此 adb 环境已经搭建成功，可以输入以下命令做个验证：
&lt;code class=&quot;highlighter-rouge&quot;&gt;adb version&lt;/code&gt;
会输出类似以下信息：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Android Debug Bridge version 1.0.41
Version 29.0.6-6198805
Installed as /Users/你自己的用户名/Library/Android/sdk/platform-tools/adb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 01 Jul 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/07/mac%E4%B8%8B%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AEadb%E7%8E%AF%E5%A2%83/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/07/mac%E4%B8%8B%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AEadb%E7%8E%AF%E5%A2%83/</guid>
        
        <category>#mac,</category>
        
        <category>#adb2</category>
        
        
      </item>
    
      <item>
        <title>RN运行报错日志记录集</title>
        <description>&lt;p&gt;整理了这两年开发 rn 过程中，记录了的一些，遇到的运行相关的问题。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=56f25e41d1ae0fef7581a03c22b5cd92&quot;&gt;友盟 iOS13 报错([_LSDefaults sharedInstance] unrecognized selector sent to class)&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=a6d500b937230779049524bce2e7c7db&quot;&gt;Could not launch “XXX” Domain IDEDebugSessionErrorDomain&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=e916ffe40a7d16396b165d2e4e8594bb&quot;&gt;Cannot fit requested classes in a single dex file&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=e6349dd07bbd289330901d1f15df14ee&quot;&gt;react-native android 报错找不到相应模块解决办法&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=7cd87f43a91251515030424e4035ce38&quot;&gt;ios 连接真机调试的时候打不开 debug 模式&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=2afccb797f0ba6ebad16c0faf7247d47&quot;&gt;RN0.57 打包报错，Execution failed for task ‘xxx，verifyReleaseResources’&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=b199fecaa64b9ae5a7862abdaa6b6e0d&quot;&gt;执行 react-native run-android 报错&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=d242c87f075b8762ccec330c864cbce8&quot;&gt;FileProvider 冲突报错(现有的代码拉下来就会有这个问题，因为加了下载更新相关的代码导致)&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=be218e6ad56f78e601ee9359d32800bd&quot;&gt;react native android studio 报错 R 文件丢失&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=ca07faaf259887bc7eb2ae1bee6efc63&quot;&gt;IOS 打包报重复引用问题&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=1689f0ac9b781cf468b9700cc0df5c6a&quot;&gt;react native android4.4 开启 debug 模式无效问题&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=3e2bbcfda4dfddab9dbc511603e74e98&quot;&gt;react-native run-android 运行完，开启 debug 模式 metro bundle 报错&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=7a10ba38769f1c7546249b7a4c699a25&quot;&gt;react-native run-android 报错&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=f9c44683ee4ba75c8f003f3a81c580ac&quot;&gt;React Native 日常报错 ‘config.h’ file not found&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=b96388a5ccc0b33f6107d4499c2fd0ae&quot;&gt;android 编译报错 Could not find support-compat.aar (com.android.support:support-compat:27.1.0)&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=5654116592cfacf14fd4d52e3002b6e1&quot;&gt;android 报错：Only fullscreen activities can request orientation&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=3c8d223d1ad0dc808c53e07517d13855&quot;&gt;React Native 报错：Error recordAsync Expected a Camera component&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=830c4c077ee361a0575ad2361cc6de8b&quot;&gt;react-native run-android 运行报错说找不到设备（权限问题）&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=7392c313d2ab61c9d71bf227946b881e&quot;&gt;打包常见错误&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://note.youdao.com/noteshare?id=f0ccc6a63e9fb22e1ba0bdde8ed18da9&quot;&gt;安装启动遇到的问题&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;android 真机运行，报错找不到 bundle.js 文件，解决办法：(这个不是最好的解决办法，具体的我还有点记不太清了)
Unable to load script from assets ‘index.android.bundle’ ？
解决办法：
在 android\app\src\main\下新建 assets 文件夹，然后执行：
react-native bundle –platform android –dev false –entry-file index.js –bundle-output android/app/src/main/assets/index.android.bundle –assets-dest android/app/src/main/res
会在 assets 下面生成 index.android.bundle 和 index.android.bundle.meta 文件
最后重新运行：react-native run-android
就可以了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://reactnative.cn/docs/0.51/running-on-device-android.html&quot;&gt;android 真机运行可以了，开启 remote debug 调试报错&lt;/a&gt;
运行:
&lt;code class=&quot;highlighter-rouge&quot;&gt;adb reverse tcp:8081 tcp:8081&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 26 Apr 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/04/RN%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E9%9B%86/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/RN%E8%BF%90%E8%A1%8C%E6%8A%A5%E9%94%99%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E9%9B%86/</guid>
        
        
      </item>
    
  </channel>
</rss>
